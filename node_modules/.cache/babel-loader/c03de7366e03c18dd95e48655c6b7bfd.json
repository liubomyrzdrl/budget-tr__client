{"ast":null,"code":"import { handleActions, combineActions } from 'redux-actions';\nimport { getUserStart, getUserError } from './userActions';\nimport { loginSuccess } from '../auth/authActions';\nconst INITIAL_STATE = {\n  fetchUser: {\n    isLoading: false,\n    isError: false,\n    error: null\n  },\n  user: null\n};\nexport default handleActions({\n  [getUserStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      fetchUser: { ...state.fetchUser,\n        isLoading: true,\n        isError: false\n      }\n    };\n  },\n  // [loginSuccess.toString()]: (state, action) => ({\n  //   ...state,\n  //   fetchUser: {\n  //     ...state.fetchUser,\n  //     isLoading: false,\n  //     isError: false,\n  //   },\n  //   user: action.payload.user,\n  // }),\n  [combineActions( // authActions.login.success,\n  loginSuccess // registerSuccess.toString,\n  // getUserSuccess.toString,\n  )]: (state, action) => ({ ...state,\n    fetchUser: { ...state.fetchUser,\n      isLoading: false,\n      isError: false\n    },\n    user: action.payload.user\n  }),\n  [getUserError.toString()]: state => ({ ...state,\n    fetchViewer: { ...state.fetchUser,\n      isLoading: false,\n      isError: true,\n      error: true\n    }\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/user/userReducer.ts"],"names":["handleActions","combineActions","getUserStart","getUserError","loginSuccess","INITIAL_STATE","fetchUser","isLoading","isError","error","user","toString","state","console","log","action","payload","fetchViewer"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,eAA9C;AACA,SAASC,YAAT,EAAuCC,YAAvC,QAA2D,eAA3D;AACA,SAASC,YAAT,QAA6C,qBAA7C;AAIA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE,KADF;AAETC,IAAAA,OAAO,EAAE,KAFA;AAGTC,IAAAA,KAAK,EAAE;AAHE,GADS;AAMpBC,EAAAA,IAAI,EAAE;AANc,CAAtB;AASA,eAAeV,aAAa,CAC1B;AACE,GAACE,YAAY,CAACS,QAAb,EAAD,GAA4BC,KAAD,IAAW;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAELN,MAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAETC,QAAAA,SAAS,EAAE,IAFF;AAGTC,QAAAA,OAAO,EAAE;AAHA;AAFN,KAAP;AAQD,GAXH;AAaE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAACP,cAAc,EACb;AACEG,EAAAA,YAFW,CAGb;AACA;AAJa,GAAf,GAKI,CAACQ,KAAD,EAAQG,MAAR,MAAoB,EACtB,GAAGH,KADmB;AAEtBN,IAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAETC,MAAAA,SAAS,EAAE,KAFF;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAFW;AAOtBE,IAAAA,IAAI,EAAEK,MAAM,CAACC,OAAP,CAAeN;AAPC,GAApB,CA3BN;AAqCE,GAACP,YAAY,CAACQ,QAAb,EAAD,GAA4BC,KAAD,KAAY,EACrC,GAAGA,KADkC;AAErCK,IAAAA,WAAW,EAAE,EACX,GAAGL,KAAK,CAACN,SADE;AAEXC,MAAAA,SAAS,EAAE,KAFA;AAGXC,MAAAA,OAAO,EAAE,IAHE;AAIXC,MAAAA,KAAK,EAAE;AAJI;AAFwB,GAAZ;AArC7B,CAD0B,EAgD1BJ,aAhD0B,CAA5B","sourcesContent":["import { handleActions, combineActions } from 'redux-actions';\nimport { getUserStart, getUserSuccess, getUserError } from './userActions';\nimport { loginSuccess,registerSuccess } from '../auth/authActions';\nimport * as appActions from '../app/appActions';\nimport { authActions } from '../auth';\n\nconst INITIAL_STATE = {\n  fetchUser: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n  user: null,\n};\n\nexport default handleActions(\n  {\n    [getUserStart.toString()]: (state) => {\n      console.log('STATE', state);\n      return {\n        ...state,\n        fetchUser: {\n          ...state.fetchUser,\n          isLoading: true,\n          isError: false,\n        },\n      };\n    },\n\n    // [loginSuccess.toString()]: (state, action) => ({\n    //   ...state,\n    //   fetchUser: {\n    //     ...state.fetchUser,\n    //     isLoading: false,\n    //     isError: false,\n    //   },\n    //   user: action.payload.user,\n    // }),\n    [combineActions(\n      // authActions.login.success,\n        loginSuccess,\n      // registerSuccess.toString,\n      // getUserSuccess.toString,\n    )]: (state, action) => ({\n      ...state,\n      fetchUser: {\n        ...state.fetchUser,\n        isLoading: false,\n        isError: false,\n      },\n      user: action.payload.user,\n    }),\n\n    [getUserError.toString()]: (state) => ({\n      ...state,\n      fetchViewer: {\n        ...state.fetchUser,\n        isLoading: false,\n        isError: true,\n        error: true,\n      },\n    }),\n  },\n  INITIAL_STATE,\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { handleActions } from \"redux-actions\";\nimport { loginStart, loginSuccess, loginError, registerStart, registerSuccess, registerError } from \"./authActions\";\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null\n  },\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null\n  }\n};\nexport default handleActions({\n  [loginStart.toString()]: state => {\n    return { ...state,\n      login: { ...state.login,\n        isLoading: true,\n        isError: false,\n        error: null\n      }\n    };\n  },\n  [loginSuccess.toString()]: state => ({ ...state,\n    login: { ...state.login,\n      isLoading: false,\n      isError: false\n    }\n  }),\n  [loginError.toString()]: state => ({ ...state,\n    login: { ...state.login,\n      isLoading: false,\n      isError: true\n    }\n  }),\n  [registerStart.toString()]: state => {\n    return { ...state,\n      register: { ...state.register,\n        isLoading: true,\n        isError: false,\n        error: null\n      }\n    };\n  },\n  [registerSuccess.toString()]: state => ({ ...state,\n    register: { ...state.register,\n      isLoading: false,\n      isError: false\n    }\n  }),\n  [registerError.toString()]: (state, {\n    payload\n  }) => ({ ...state,\n    register: { ...state.register,\n      isLoading: false,\n      isError: true,\n      error: payload\n    }\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/auth/authReducer.ts"],"names":["handleActions","loginStart","loginSuccess","loginError","registerStart","registerSuccess","registerError","INITIAL_STATE","login","isLoading","isError","error","register","toString","state","payload"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SACEC,UADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,eALF,EAMEC,aANF,QAOO,eAPP;AAoBA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,KADN;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,KAAK,EAAE;AAHF,GADa;AAOpBC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,SAAS,EAAE,KADH;AAERC,IAAAA,OAAO,EAAE,KAFD;AAGRC,IAAAA,KAAK,EAAE;AAHC;AAPU,CAAtB;AAcA,eAAeX,aAAa,CAC1B;AACE,GAACC,UAAU,CAACY,QAAX,EAAD,GAA0BC,KAAD,IAAW;AAClC,WAAO,EACL,GAAGA,KADE;AAELN,MAAAA,KAAK,EAAE,EACL,GAAGM,KAAK,CAACN,KADJ;AAELC,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,KAAK,EAAE;AAJF;AAFF,KAAP;AASD,GAXH;AAaE,GAACT,YAAY,CAACW,QAAb,EAAD,GAA4BC,KAAD,KAA2B,EACpD,GAAGA,KADiD;AAEpDN,IAAAA,KAAK,EAAE,EACL,GAAGM,KAAK,CAACN,KADJ;AAELC,MAAAA,SAAS,EAAE,KAFN;AAGLC,MAAAA,OAAO,EAAE;AAHJ;AAF6C,GAA3B,CAb7B;AAsBE,GAACP,UAAU,CAACU,QAAX,EAAD,GAA0BC,KAAD,KAA2B,EAClD,GAAGA,KAD+C;AAElDN,IAAAA,KAAK,EAAE,EACL,GAAGM,KAAK,CAACN,KADJ;AAELC,MAAAA,SAAS,EAAE,KAFN;AAGLC,MAAAA,OAAO,EAAE;AAHJ;AAF2C,GAA3B,CAtB3B;AA+BE,GAACN,aAAa,CAACS,QAAd,EAAD,GAA6BC,KAAD,IAA0B;AACpD,WAAO,EACL,GAAGA,KADE;AAELF,MAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAERH,QAAAA,SAAS,EAAE,IAFH;AAGRC,QAAAA,OAAO,EAAE,KAHD;AAIRC,QAAAA,KAAK,EAAE;AAJC;AAFL,KAAP;AASD,GAzCH;AA2CE,GAACN,eAAe,CAACQ,QAAhB,EAAD,GAA+BC,KAAD,KAA4B,EACxD,GAAGA,KADqD;AAExDF,IAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAERH,MAAAA,SAAS,EAAE,KAFH;AAGRC,MAAAA,OAAO,EAAE;AAHD;AAF8C,GAA5B,CA3ChC;AAoDE,GAACJ,aAAa,CAACO,QAAd,EAAD,GAA4B,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,MAAwC,EAClE,GAAGD,KAD+D;AAElEF,IAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAERH,MAAAA,SAAS,EAAE,KAFH;AAGRC,MAAAA,OAAO,EAAE,IAHD;AAIRC,MAAAA,KAAK,EAAEI;AAJC;AAFwD,GAAxC;AApD9B,CAD0B,EA+D1BR,aA/D0B,CAA5B","sourcesContent":["import { handleActions } from \"redux-actions\";\nimport {\n  loginStart,\n  loginSuccess,\n  loginError,\n  registerStart,\n  registerSuccess,\n  registerError,\n} from \"./authActions\";\n\ntype LoginRegisterType = {\n  isLoading: boolean\n  isError: boolean\n  error: string \n}\n\nexport type AuthStateType = {\n  login: LoginRegisterType\n  register: LoginRegisterType\n}\n\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n}\n\nexport default handleActions<AuthStateType>(\n  {\n    [loginStart.toString()]: (state) => {\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          isLoading: true,\n          isError: false,\n          error: null,\n        },\n      };\n    },\n\n    [loginSuccess.toString()]: (state: AuthStateType) => ({\n      ...state,\n      login: {\n        ...state.login,\n        isLoading: false,\n        isError: false,\n      },\n    }),\n\n    [loginError.toString()]: (state: AuthStateType) => ({\n      ...state,\n      login: {\n        ...state.login,\n        isLoading: false,\n        isError: true,\n      },\n    }),\n\n    [registerStart.toString()]: (state: AuthStateType) => {\n      return {\n        ...state,\n        register: {\n          ...state.register,\n          isLoading: true,\n          isError: false,\n          error: null,\n        },\n      };\n    },\n\n    [registerSuccess.toString()]: (state: AuthStateType,) => ({\n      ...state,\n      register: {\n        ...state.register,\n        isLoading: false,\n        isError: false,\n      },\n    }),\n\n    [registerError.toString()]: (state, { payload }): AuthStateType => ({\n      ...state,\n      register: {\n        ...state.register,\n        isLoading: false,\n        isError: true,\n        error: payload\n      },\n    }),\n  },\n  INITIAL_STATE\n);\n"]},"metadata":{},"sourceType":"module"}
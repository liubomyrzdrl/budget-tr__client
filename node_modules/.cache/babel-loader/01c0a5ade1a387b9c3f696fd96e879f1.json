{"ast":null,"code":"import { getEntriesStart, getEntriesSuccess, getEntriesError, createEntryStart, createEntrySuccess, createEntryError, updateEntryStart, updateEntrySuccess, updateEntryError, deleteEntryStart, deleteEntrySuccess, deleteEntryError } from \"./entriesActions\";\nimport { ApiEntries } from \"../../api\";\nexport function getEntries(userId, date) {\n  return async function getEntriesThunk(dispatch) {\n    try {\n      dispatch(getEntriesStart());\n      const entries = await ApiEntries.fetchEntries(userId, date);\n      dispatch(getEntriesSuccess(entries.data));\n    } catch (error) {\n      dispatch(getEntriesError());\n    }\n  };\n}\nexport function createEntry(entrie) {\n  return async function createEntryThunk(dispatch, getState) {\n    try {\n      dispatch(createEntryStart());\n      const data = await ApiEntries.createEntry(entrie);\n      dispatch(createEntrySuccess(data.data));\n    } catch (error) {\n      dispatch(createEntryError());\n    }\n  };\n}\nexport function updateEntry(entrie) {\n  return async function updateEntryThunk(dispatch) {\n    try {\n      dispatch(updateEntryStart());\n      const data = await ApiEntries.updateEntry(entrie);\n      debugger;\n      dispatch(updateEntrySuccess(data.data));\n    } catch (error) {\n      dispatch(updateEntryError());\n    }\n  };\n}\nexport function deleteEntry(id) {\n  return async function deleteEntryThunk(dispatch) {\n    try {\n      dispatch(deleteEntryStart());\n      await ApiEntries.deleteEntries(id);\n      dispatch(deleteEntrySuccess(id));\n    } catch (error) {\n      dispatch(deleteEntryError());\n    }\n  };\n}","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/entries/entriesOperation.ts"],"names":["getEntriesStart","getEntriesSuccess","getEntriesError","createEntryStart","createEntrySuccess","createEntryError","updateEntryStart","updateEntrySuccess","updateEntryError","deleteEntryStart","deleteEntrySuccess","deleteEntryError","ApiEntries","getEntries","userId","date","getEntriesThunk","dispatch","entries","fetchEntries","data","error","createEntry","entrie","createEntryThunk","getState","updateEntry","updateEntryThunk","deleteEntry","id","deleteEntryThunk","deleteEntries"],"mappings":"AAAA,SACEA,eADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,kBALF,EAMEC,gBANF,EAOEC,gBAPF,EAQEC,kBARF,EASEC,gBATF,EAUEC,gBAVF,EAWEC,kBAXF,EAYEC,gBAZF,QAaO,kBAbP;AAcA,SAASC,UAAT,QAA2B,WAA3B;AAkBA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAAoCC,IAApC,EAAkE;AACvE,SAAO,eAAeC,eAAf,CACLC,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAACjB,eAAe,EAAhB,CAAR;AACA,YAAMkB,OAAO,GAAG,MAAMN,UAAU,CAACO,YAAX,CAAwBL,MAAxB,EAAgCC,IAAhC,CAAtB;AACAE,MAAAA,QAAQ,CAAChB,iBAAiB,CAACiB,OAAO,CAACE,IAAT,CAAlB,CAAR;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdJ,MAAAA,QAAQ,CAACf,eAAe,EAAhB,CAAR;AACD;AACF,GAVD;AAWD;AAED,OAAO,SAASoB,WAAT,CAAqBC,MAArB,EAAyD;AAC9D,SAAO,eAAeC,gBAAf,CACLP,QADK,EAELQ,QAFK,EAGL;AACA,QAAI;AACFR,MAAAA,QAAQ,CAACd,gBAAgB,EAAjB,CAAR;AACA,YAAMiB,IAAI,GAAG,MAAMR,UAAU,CAACU,WAAX,CAAuBC,MAAvB,CAAnB;AAEAN,MAAAA,QAAQ,CAACb,kBAAkB,CAACgB,IAAI,CAACA,IAAN,CAAnB,CAAR;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACdJ,MAAAA,QAAQ,CAACZ,gBAAgB,EAAjB,CAAR;AACD;AACF,GAZD;AAaD;AAED,OAAO,SAASqB,WAAT,CAAqBH,MAArB,EAAyD;AAC9D,SAAO,eAAeI,gBAAf,CACLV,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAACX,gBAAgB,EAAjB,CAAR;AAEA,YAAMc,IAAI,GAAG,MAAMR,UAAU,CAACc,WAAX,CAAuBH,MAAvB,CAAnB;AACA;AACAN,MAAAA,QAAQ,CAACV,kBAAkB,CAACa,IAAI,CAACA,IAAN,CAAnB,CAAR;AACD,KAND,CAME,OAAOC,KAAP,EAAc;AACdJ,MAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;AACD;AACF,GAZD;AAaD;AAED,OAAO,SAASoB,WAAT,CAAqBC,EAArB,EAAiD;AACtD,SAAO,eAAeC,gBAAf,CACLb,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACE,YAAMG,UAAU,CAACmB,aAAX,CAAyBF,EAAzB,CAAN;AAEFZ,MAAAA,QAAQ,CAACP,kBAAkB,CAACmB,EAAD,CAAnB,CAAR;AACD,KALD,CAKE,OAAOR,KAAP,EAAc;AACdJ,MAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACD;AACF,GAXD;AAYD","sourcesContent":["import {\n  getEntriesStart,\n  getEntriesSuccess,\n  getEntriesError,\n  createEntryStart,\n  createEntrySuccess,\n  createEntryError,\n  updateEntryStart,\n  updateEntrySuccess,\n  updateEntryError,\n  deleteEntryStart,\n  deleteEntrySuccess,\n  deleteEntryError\n} from \"./entriesActions\";\nimport { ApiEntries } from \"../../api\";\nimport { Dispatch } from \"redux\";\nimport { Action } from \"redux-actions\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { EntryStateType } from \"./entriesReducer\";\nimport { EntrieType } from \"../../types\";\n\ntype EntiesPayload = {\n  payload: () => EntrieType[];\n};\n\nexport type EntryThunkType = ThunkAction<\n  Promise<Array<EntrieType> | void | EntrieType>,\n  EntryStateType,\n  unknown,\n  Action<EntiesPayload>\n>\n\nexport function getEntries(userId: number, date: string): EntryThunkType {\n  return async function getEntriesThunk(\n    dispatch: Dispatch<Action<void> | Action<Array<EntrieType>>>\n  ) {\n    try {\n      dispatch(getEntriesStart());\n      const entries = await ApiEntries.fetchEntries(userId, date);\n      dispatch(getEntriesSuccess(entries.data));\n    } catch (error) {\n      dispatch(getEntriesError());\n    }\n  };\n}\n\nexport function createEntry(entrie: EntrieType): EntryThunkType {\n  return async function createEntryThunk(\n    dispatch: Dispatch<Action<void> | Action<EntrieType>>,\n    getState\n  ) {\n    try {\n      dispatch(createEntryStart());\n      const data = await ApiEntries.createEntry(entrie);\n\n      dispatch(createEntrySuccess(data.data));\n    } catch (error) {\n      dispatch(createEntryError());\n    }\n  };\n}\n\nexport function updateEntry(entrie: EntrieType): EntryThunkType {\n  return async function updateEntryThunk(\n    dispatch: Dispatch<Action<void> | Action<EntrieType>>\n  ) {\n    try {\n      dispatch(updateEntryStart());\n\n      const data = await ApiEntries.updateEntry(entrie);\n      debugger\n      dispatch(updateEntrySuccess(data.data))\n    } catch (error) {\n      dispatch(updateEntryError());\n    }\n  };\n}\n\nexport function deleteEntry(id: number): EntryThunkType {\n  return async function deleteEntryThunk(\n    dispatch: Dispatch<Action<number | void> | Action<EntrieType>>\n  ) {\n    try {\n      dispatch(deleteEntryStart());\n        await ApiEntries.deleteEntries(id);\n        \n      dispatch(deleteEntrySuccess(id))\n    } catch (error) {\n      dispatch(deleteEntryError());\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { loginStart, loginSuccess, loginError, registerStart, registerSuccess, registerError } from './authActions';\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null\n  },\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null\n  }\n};\nexport default handleActions({\n  [loginStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      login: { ...state.login,\n        isLoading: true,\n        isError: false,\n        error: null\n      }\n    };\n  },\n  [loginSuccess.toString()]: state => ({ ...state,\n    login: { ...state.login,\n      isLoading: false,\n      isError: false\n    }\n  }),\n  [loginError.toString()]: state => ({ ...state,\n    login: { ...state.login,\n      isLoading: false,\n      isError: true\n    }\n  }),\n  [registerStart.toString()]: state => {\n    return { ...state,\n      register: { ...state.register,\n        isLoading: true,\n        isError: false,\n        error: null\n      }\n    };\n  },\n  [registerSuccess.toString()]: state => ({ ...state,\n    register: { ...state.register,\n      isLoading: false,\n      isError: false\n    }\n  }),\n  [registerError.toString()]: state => ({ ...state,\n    register: { ...state.register,\n      isLoading: false,\n      isError: true\n    }\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/auth/authReducer.ts"],"names":["handleActions","loginStart","loginSuccess","loginError","registerStart","registerSuccess","registerError","INITIAL_STATE","login","isLoading","isError","error","register","toString","state","console","log"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,aAA/C,EAA8DC,eAA9D,EAA+EC,aAA/E,QAAmG,eAAnG;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,KADN;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,KAAK,EAAE;AAHF,GADa;AAOpBC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,SAAS,EAAE,KADH;AAERC,IAAAA,OAAO,EAAE,KAFD;AAGRC,IAAAA,KAAK,EAAE;AAHC;AAPU,CAAtB;AAcA,eAAeX,aAAa,CAC1B;AACE,GAACC,UAAU,CAACY,QAAX,EAAD,GAA0BC,KAAD,IAAW;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAELN,MAAAA,KAAK,EAAE,EACN,GAAGM,KAAK,CAACN,KADH;AAENC,QAAAA,SAAS,EAAE,IAFL;AAGNC,QAAAA,OAAO,EAAE,KAHH;AAINC,QAAAA,KAAK,EAAE;AAJD;AAFF,KAAP;AAUD,GAbH;AAeE,GAACT,YAAY,CAACW,QAAb,EAAD,GAA4BC,KAAD,KAAY,EACrC,GAAGA,KADkC;AAErCN,IAAAA,KAAK,EAAE,EACL,GAAGM,KAAK,CAACN,KADJ;AAELC,MAAAA,SAAS,EAAE,KAFN;AAGLC,MAAAA,OAAO,EAAE;AAHJ;AAF8B,GAAZ,CAf7B;AAyBE,GAACP,UAAU,CAACU,QAAX,EAAD,GAA0BC,KAAD,KAAY,EACnC,GAAGA,KADgC;AAEnCN,IAAAA,KAAK,EAAE,EACL,GAAGM,KAAK,CAACN,KADJ;AAEJC,MAAAA,SAAS,EAAE,KAFP;AAGJC,MAAAA,OAAO,EAAE;AAHL;AAF4B,GAAZ,CAzB3B;AAqCE,GAACN,aAAa,CAACS,QAAd,EAAD,GAA6BC,KAAD,IAAW;AACrC,WAAO,EACL,GAAGA,KADE;AAELF,MAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAEPH,QAAAA,SAAS,EAAE,IAFJ;AAGPC,QAAAA,OAAO,EAAE,KAHF;AAIPC,QAAAA,KAAK,EAAE;AAJA;AAFL,KAAP;AAUD,GAhDH;AAkDE,GAACN,eAAe,CAACQ,QAAhB,EAAD,GAA+BC,KAAD,KAAY,EACxC,GAAGA,KADqC;AAExCF,IAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAEVH,MAAAA,SAAS,EAAE,KAFD;AAGVC,MAAAA,OAAO,EAAE;AAHC;AAF8B,GAAZ,CAlDhC;AA4DE,GAACJ,aAAa,CAACO,QAAd,EAAD,GAA6BC,KAAD,KAAY,EACtC,GAAGA,KADmC;AAEtCF,IAAAA,QAAQ,EAAE,EACR,GAAGE,KAAK,CAACF,QADD;AAERH,MAAAA,SAAS,EAAE,KAFH;AAGRC,MAAAA,OAAO,EAAE;AAHD;AAF4B,GAAZ;AA5D9B,CAD0B,EAuE1BH,aAvE0B,CAA5B","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { loginStart, loginSuccess, loginError, registerStart, registerSuccess, registerError} from './authActions';\n\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n};\n\nexport default handleActions(\n  {\n    [loginStart.toString()]: (state) => {\n      console.log('STATE', state);\n      return {\n        ...state,\n        login: {\n         ...state.login,\n         isLoading: true,\n         isError: false,\n         error: null,\n        }\n       \n      };\n    },\n\n    [loginSuccess.toString()]: (state) => ({\n      ...state,\n      login: {\n        ...state.login,\n        isLoading: false,\n        isError: false,\n\n      }\n    }),\n\n    [loginError.toString()]: (state) => ({\n      ...state,\n      login: {\n        ...state.login,\n         isLoading: false,\n         isError: true,\n       \n      }  \n      \n      \n    }),\n\n    [registerStart.toString()]: (state) => {    \n      return {\n        ...state,\n        register: {\n          ...state.register,\n           isLoading: true,\n           isError: false,\n           error: null,\n        }\n       \n      };\n    },\n\n    [registerSuccess.toString()]: (state) => ({\n      ...state,\n      register: {\n        ...state.register,\n      isLoading: false,\n      isError: false,\n      }\n      \n    }),\n\n    [registerError.toString()]: (state) => ({\n      ...state,\n      register: {\n        ...state.register,\n        isLoading: false,\n        isError: true,\n      }\n      \n    }),\n  },\n  INITIAL_STATE,\n);\n"]},"metadata":{},"sourceType":"module"}
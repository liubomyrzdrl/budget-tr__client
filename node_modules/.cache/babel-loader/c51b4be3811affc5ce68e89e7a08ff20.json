{"ast":null,"code":"import { handleActions, combineActions } from 'redux-actions';\nimport { getUserStart, getUserSuccess, getUserError } from './userActions';\nimport { loginSuccess, registerSuccess } from '../auth/authActions';\nconst INITIAL_STATE = {\n  fetchUser: {\n    isLoading: false,\n    isError: false,\n    error: null\n  },\n  data: {\n    data: null\n  }\n};\nexport default handleActions({\n  [getUserStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      fetchUser: { ...state.fetchUser,\n        isLoading: true,\n        isError: false\n      }\n    };\n  },\n  // [loginSuccess.toString()]: (state, action) => ({\n  //   ...state,\n  //   fetchUser: {\n  //     ...state.fetchUser,\n  //     isLoading: false,\n  //     isError: false,\n  //   },\n  //   user: action.payload.user,\n  // }),\n  //@ts-ignore\n  [combineActions( // authActions.login.success,\n  loginSuccess, registerSuccess, getUserSuccess)]: (state, action) => {\n    console.log(\"REDUCER\", action.payload.data);\n    return { ...state,\n      fetchUser: { ...state.fetchUser,\n        isLoading: false,\n        isError: false\n      },\n      user: action.payload.data.data\n    };\n  },\n  [getUserError.toString()]: state => ({ ...state,\n    fetchUser: { ...state.fetchUser,\n      isLoading: false,\n      isError: true\n    }\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/user/userReducer.ts"],"names":["handleActions","combineActions","getUserStart","getUserSuccess","getUserError","loginSuccess","registerSuccess","INITIAL_STATE","fetchUser","isLoading","isError","error","data","toString","state","console","log","action","payload","user"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,eAA9C;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,YAAvC,QAA2D,eAA3D;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,qBAA9C;AAIA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE,KADF;AAETC,IAAAA,OAAO,EAAE,KAFA;AAGTC,IAAAA,KAAK,EAAE;AAHE,GADS;AAMpBC,EAAAA,IAAI,EAAE;AACJA,IAAAA,IAAI,EAAE;AADF;AANc,CAAtB;AAWA,eAAeZ,aAAa,CAC1B;AACE,GAACE,YAAY,CAACW,QAAb,EAAD,GAA4BC,KAAD,IAAW;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAELN,MAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAETC,QAAAA,SAAS,EAAE,IAFF;AAGTC,QAAAA,OAAO,EAAE;AAHA;AAFN,KAAP;AAQD,GAXH;AAaE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,GAACT,cAAc,EACb;AACGI,EAAAA,YAFU,EAGVC,eAHU,EAIVH,cAJU,CAAf,GAKI,CAACW,KAAD,EAAQG,MAAR,KAAmB;AACrBF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACC,OAAP,CAAeN,IAAtC;AACF,WAAQ,EAAE,GAAGE,KAAL;AACNN,MAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,OAAO,EAAE;AAHA,OADL;AAMNS,MAAAA,IAAI,EAAEF,MAAM,CAACC,OAAP,CAAeN,IAAf,CAAoBA;AANpB,KAAR;AAOC,GAtCH;AAwCE,GAACR,YAAY,CAACS,QAAb,EAAD,GAA4BC,KAAD,KAAY,EACrC,GAAGA,KADkC;AAErCN,IAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAETC,MAAAA,SAAS,EAAE,KAFF;AAGTC,MAAAA,OAAO,EAAE;AAHA;AAF0B,GAAZ;AAxC7B,CAD0B,EAkD1BH,aAlD0B,CAA5B","sourcesContent":["import { handleActions, combineActions } from 'redux-actions';\nimport { getUserStart, getUserSuccess, getUserError } from './userActions';\nimport { loginSuccess, registerSuccess } from '../auth/authActions';\nimport * as appActions from '../app/appActions';\nimport { authActions } from '../auth';\n\nconst INITIAL_STATE = {\n  fetchUser: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n  data: {\n    data: null\n  },\n};\n\nexport default handleActions(\n  {\n    [getUserStart.toString()]: (state) => {\n      console.log('STATE', state);\n      return {\n        ...state,\n        fetchUser: {\n          ...state.fetchUser,\n          isLoading: true,\n          isError: false,\n        },\n      };\n    },\n\n    // [loginSuccess.toString()]: (state, action) => ({\n    //   ...state,\n    //   fetchUser: {\n    //     ...state.fetchUser,\n    //     isLoading: false,\n    //     isError: false,\n    //   },\n    //   user: action.payload.user,\n    // }),\n\n    //@ts-ignore\n    [combineActions(\n      // authActions.login.success,\n         loginSuccess,\n         registerSuccess,\n         getUserSuccess,\n    )]: (state, action) => {\n      console.log(\"REDUCER\", action.payload.data)\n    return  { ...state,\n      fetchUser: {\n        ...state.fetchUser,\n        isLoading: false,\n        isError: false,\n      },\n      user: action.payload.data.data,}\n    },\n\n    [getUserError.toString()]: (state) => ({\n      ...state,\n      fetchUser: {\n        ...state.fetchUser,\n        isLoading: false,\n        isError: true,\n      },\n    }),\n  },\n  INITIAL_STATE,\n);\n"]},"metadata":{},"sourceType":"module"}
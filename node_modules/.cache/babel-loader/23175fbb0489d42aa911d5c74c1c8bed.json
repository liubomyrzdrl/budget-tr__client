{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { getUserStart, getUserSuccess, getUserError } from './userActions';\nconst INITIAL_STATE = {\n  isLoading: false,\n  isError: false,\n  error: null,\n  data: {\n    user: null\n  }\n}; // const INITIAL_STATE = {\n//   fetchUser: {\n//     isLoading: false,\n//     isError: false,\n//     error: null,\n//   },\n//   data: {\n//     data: null\n//   },\n// };\n\nexport default handleActions({\n  [getUserStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      isLoading: true,\n      isError: false\n    };\n  },\n  [getUserSuccess.toString()]: (state, action) => {\n    console.log(\"REDUCER\", action.payload);\n    return { ...state,\n      isLoading: false,\n      isError: false,\n      data: action.payload.data\n    };\n  },\n  //@ts-ignore\n  // [combineActions(\n  //   // authActions.login.success,\n  //      loginSuccess,\n  //      registerSuccess,\n  //      getUserSuccess,\n  // )]: (state, action) => {\n  //   console.log(\"REDUCER\", action.payload.data)\n  // return  { ...state,\n  //   fetchUser: {\n  //     ...state.fetchUser,\n  //     isLoading: false,\n  //     isError: false,\n  //   },\n  //   data: action.payload.data,}\n  // },\n  [getUserError.toString()]: state => ({ ...state,\n    isLoading: false,\n    isError: true\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/user/userReducer.ts"],"names":["handleActions","getUserStart","getUserSuccess","getUserError","INITIAL_STATE","isLoading","isError","error","data","user","toString","state","console","log","action","payload"],"mappings":"AAAA,SAASA,aAAT,QAA8C,eAA9C;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,YAAvC,QAA2D,eAA3D;AAKA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,SAAS,EAAE,KADO;AAElBC,EAAAA,OAAO,EAAE,KAFS;AAGlBC,EAAAA,KAAK,EAAE,IAHW;AAIlBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,IAAI,EAAE;AADD;AAJY,CAAtB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeT,aAAa,CAC1B;AACE,GAACC,YAAY,CAACS,QAAb,EAAD,GAA4BC,KAAD,IAAW;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAEHN,MAAAA,SAAS,EAAE,IAFR;AAGHC,MAAAA,OAAO,EAAE;AAHN,KAAP;AAMD,GATH;AAWE,GAACJ,cAAc,CAACQ,QAAf,EAAD,GAA6B,CAACC,KAAD,EAAQG,MAAR,KAAmB;AAC9CF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACC,OAA9B;AACC,WAAO,EACL,GAAGJ,KADE;AAENN,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,OAAO,EAAE,KAHH;AAINE,MAAAA,IAAI,EAAEM,MAAM,CAACC,OAAP,CAAeP;AAJf,KAAP;AAMF,GAnBH;AAqBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAACL,YAAY,CAACO,QAAb,EAAD,GAA4BC,KAAD,KAAY,EACnC,GAAGA,KADgC;AAEnCN,IAAAA,SAAS,EAAE,KAFwB;AAGnCC,IAAAA,OAAO,EAAE;AAH0B,GAAZ;AAtC7B,CAD0B,EA6C1BF,aA7C0B,CAA5B","sourcesContent":["import { handleActions, combineActions } from 'redux-actions';\nimport { getUserStart, getUserSuccess, getUserError } from './userActions';\nimport { loginSuccess, registerSuccess } from '../auth/authActions';\nimport * as appActions from '../app/appActions';\nimport { authActions } from '../auth';\n\nconst INITIAL_STATE = {\n    isLoading: false,\n    isError: false,\n    error: null,\n    data: {\n     user: null\n  },\n};\n// const INITIAL_STATE = {\n//   fetchUser: {\n//     isLoading: false,\n//     isError: false,\n//     error: null,\n//   },\n//   data: {\n//     data: null\n//   },\n// };\n\nexport default handleActions(\n  {\n    [getUserStart.toString()]: (state) => {\n      console.log('STATE', state);\n      return {\n        ...state,            \n          isLoading: true,\n          isError: false,\n     \n      };\n    },\n\n    [getUserSuccess.toString()]: (state, action) => {\n      console.log(\"REDUCER\", action.payload)\n       return { \n         ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload.data,\n      }\n    },\n\n    //@ts-ignore\n    // [combineActions(\n    //   // authActions.login.success,\n    //      loginSuccess,\n    //      registerSuccess,\n    //      getUserSuccess,\n    // )]: (state, action) => {\n    //   console.log(\"REDUCER\", action.payload.data)\n    // return  { ...state,\n    //   fetchUser: {\n    //     ...state.fetchUser,\n    //     isLoading: false,\n    //     isError: false,\n    //   },\n    //   data: action.payload.data,}\n    // },\n\n    [getUserError.toString()]: (state) => ({\n        ...state,       \n        isLoading: false,\n        isError: true,    \n    }),\n  },\n  INITIAL_STATE,\n);\n"]},"metadata":{},"sourceType":"module"}
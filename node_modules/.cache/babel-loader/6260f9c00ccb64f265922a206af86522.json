{"ast":null,"code":"import { getEntriesStart, getEntriesSuccess, getEntriesError, createEntrieStart, createEntrieSuccess, createEntrieError, updateEntrieStart, updateEntrieSuccess, updateEntrieError, deleteEntrieStart, deleteEntrieSuccess, deleteEntrieError } from \"./entriesActions\";\nimport { ApiEntries } from \"../../api\";\nexport function getEntries(userId) {\n  return async function getEmployeesThunk(dispatch) {\n    try {\n      dispatch(getEntriesStart());\n      const entries = await ApiEntries.fetchEntries(userId);\n      dispatch(getEntriesSuccess(entries));\n    } catch (error) {\n      dispatch(getEntriesError());\n    }\n  };\n}\nexport function createEntrie(entrie) {\n  return async function createBankThunk(dispatch, getState) {\n    try {\n      dispatch(createEntrieStart());\n      const data = await ApiEntries.createEntrie(entrie);\n      dispatch(createEntrieSuccess(data));\n    } catch (error) {\n      dispatch(createEntrieError());\n    }\n  };\n}\nexport function updateEntrie(entrie) {\n  return async function updateBankThunk(dispatch) {\n    try {\n      dispatch(updateEntrieStart());\n      const data = await ApiEntries.updateEntrie(entrie);\n      dispatch(updateEntrieSuccess(data));\n    } catch (error) {\n      dispatch(updateEntrieError());\n    }\n  };\n}\nexport function deleteBank(id) {\n  return async function deleteBankThunk(dispatch) {\n    try {\n      dispatch(deleteEntrieStart());\n      await ApiEntries.deleteEntries(id);\n      dispatch(deleteEntrieSuccess(id));\n    } catch (error) {\n      dispatch(deleteEntrieError());\n    }\n  };\n}","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/entries/entriesOperation.ts"],"names":["getEntriesStart","getEntriesSuccess","getEntriesError","createEntrieStart","createEntrieSuccess","createEntrieError","updateEntrieStart","updateEntrieSuccess","updateEntrieError","deleteEntrieStart","deleteEntrieSuccess","deleteEntrieError","ApiEntries","getEntries","userId","getEmployeesThunk","dispatch","entries","fetchEntries","error","createEntrie","entrie","createBankThunk","getState","data","updateEntrie","updateBankThunk","deleteBank","id","deleteBankThunk","deleteEntries"],"mappings":"AAAA,SACEA,eADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,iBAJF,EAKEC,mBALF,EAMEC,iBANF,EAOEC,iBAPF,EAQEC,mBARF,EASEC,iBATF,EAUEC,iBAVF,EAWEC,mBAXF,EAYEC,iBAZF,QAaO,kBAbP;AAcA,SAASC,UAAT,QAA2B,WAA3B;AAkBA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA+C;AACpD,SAAO,eAAeC,iBAAf,CACLC,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAAChB,eAAe,EAAhB,CAAR;AACA,YAAMiB,OAAO,GAAG,MAAML,UAAU,CAACM,YAAX,CAAwBJ,MAAxB,CAAtB;AACAE,MAAAA,QAAQ,CAACf,iBAAiB,CAACgB,OAAD,CAAlB,CAAR;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACd,eAAe,EAAhB,CAAR;AACD;AACF,GAVD;AAWD;AAED,OAAO,SAASkB,YAAT,CAAsBC,MAAtB,EAAsD;AAC3D,SAAO,eAAeC,eAAf,CACLN,QADK,EAELO,QAFK,EAGL;AACA,QAAI;AACFP,MAAAA,QAAQ,CAACb,iBAAiB,EAAlB,CAAR;AACA,YAAMqB,IAAI,GAAG,MAAMZ,UAAU,CAACQ,YAAX,CAAwBC,MAAxB,CAAnB;AAEAL,MAAAA,QAAQ,CAACZ,mBAAmB,CAACoB,IAAD,CAApB,CAAR;AACD,KALD,CAKE,OAAOL,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACX,iBAAiB,EAAlB,CAAR;AACD;AACF,GAZD;AAaD;AAED,OAAO,SAASoB,YAAT,CAAsBJ,MAAtB,EAAqD;AAC1D,SAAO,eAAeK,eAAf,CACLV,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAACV,iBAAiB,EAAlB,CAAR;AACA,YAAMkB,IAAI,GAAG,MAAMZ,UAAU,CAACa,YAAX,CAAwBJ,MAAxB,CAAnB;AACAL,MAAAA,QAAQ,CAACT,mBAAmB,CAACiB,IAAD,CAApB,CAAR;AACD,KAJD,CAIE,OAAOL,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACD;AACF,GAVD;AAWD;AAED,OAAO,SAASmB,UAAT,CAAoBC,EAApB,EAA2C;AAChD,SAAO,eAAeC,eAAf,CACLb,QADK,EAEL;AACA,QAAI;AACFA,MAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACE,YAAMG,UAAU,CAACkB,aAAX,CAAyBF,EAAzB,CAAN;AAEFZ,MAAAA,QAAQ,CAACN,mBAAmB,CAACkB,EAAD,CAApB,CAAR;AACD,KALD,CAKE,OAAOT,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACL,iBAAiB,EAAlB,CAAR;AACD;AACF,GAXD;AAYD","sourcesContent":["import {\n  getEntriesStart,\n  getEntriesSuccess,\n  getEntriesError,\n  createEntrieStart,\n  createEntrieSuccess,\n  createEntrieError,\n  updateEntrieStart,\n  updateEntrieSuccess,\n  updateEntrieError,\n  deleteEntrieStart,\n  deleteEntrieSuccess,\n  deleteEntrieError\n} from \"./entriesActions\";\nimport { ApiEntries } from \"../../api\";\nimport { Dispatch } from \"redux\";\nimport { Action } from \"redux-actions\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { StateType } from \"./entriesReducer\";\nimport { EntrieType } from \"../../types\";\n\ntype EntiesPayload = {\n  payload: () => EntrieType[];\n};\n\nexport type ThunkType = ThunkAction<\n  Promise<Array<EntrieType> | void | EntrieType>,\n  StateType,\n  unknown,\n  Action<EntiesPayload>\n>;\n\nexport function getEntries(userId: number): ThunkType {\n  return async function getEmployeesThunk(\n    dispatch: Dispatch<Action<void> | Action<Array<EntrieType>>>\n  ) {\n    try {\n      dispatch(getEntriesStart());\n      const entries = await ApiEntries.fetchEntries(userId);\n      dispatch(getEntriesSuccess(entries));\n    } catch (error) {\n      dispatch(getEntriesError());\n    }\n  };\n}\n\nexport function createEntrie(entrie: EntrieType,): ThunkType {\n  return async function createBankThunk(\n    dispatch: Dispatch<Action<void> | Action<EntrieType>>,\n    getState\n  ) {\n    try {\n      dispatch(createEntrieStart());\n      const data = await ApiEntries.createEntrie(entrie);\n\n      dispatch(createEntrieSuccess(data));\n    } catch (error) {\n      dispatch(createEntrieError());\n    }\n  };\n}\n\nexport function updateEntrie(entrie: EntrieType): ThunkType {\n  return async function updateBankThunk(\n    dispatch: Dispatch<Action<void> | Action<EntrieType>>\n  ) {\n    try {\n      dispatch(updateEntrieStart());\n      const data = await ApiEntries.updateEntrie(entrie);\n      dispatch(updateEntrieSuccess(data));\n    } catch (error) {\n      dispatch(updateEntrieError());\n    }\n  };\n}\n\nexport function deleteBank(id: number): ThunkType {\n  return async function deleteBankThunk(\n    dispatch: Dispatch<Action<number | void> | Action<EntrieType>>\n  ) {\n    try {\n      dispatch(deleteEntrieStart());\n        await ApiEntries.deleteEntries(id);\n        \n      dispatch(deleteEntrieSuccess(id))\n    } catch (error) {\n      dispatch(deleteEntrieError());\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
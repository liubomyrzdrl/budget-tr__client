{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { loginStart, loginSuccess, loginError, registerStart, registerSuccess, registerError } from './authActions';\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null\n  },\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null\n  }\n};\nexport default handleActions({\n  [loginStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      isLoading: true,\n      isError: false,\n      error: null\n    };\n  },\n  [loginSuccess.toString()]: state => ({ ...state,\n    isLoading: false,\n    isError: false\n  }),\n  [loginError.toString()]: state => ({ ...state,\n    isLoading: false,\n    isError: true,\n    error: true\n  }),\n  [registerStart.toString()]: state => {\n    console.log('STATE', state);\n    return { ...state,\n      isLoading: true,\n      isError: false,\n      error: null\n    };\n  },\n  [registerSuccess.toString()]: state => ({ ...state,\n    isLoading: false,\n    isError: false\n  }),\n  [registerError.toString()]: state => ({ ...state,\n    isLoading: false,\n    isError: true,\n    error: true\n  })\n}, INITIAL_STATE);","map":{"version":3,"sources":["/Users/macbook/Documents/DEVELOPMENT/budget-tracker/client/src/modules/auth/authReducer.ts"],"names":["handleActions","loginStart","loginSuccess","loginError","registerStart","registerSuccess","registerError","INITIAL_STATE","login","isLoading","isError","error","register","toString","state","console","log"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,aAA/C,EAA8DC,eAA9D,EAA+EC,aAA/E,QAAmG,eAAnG;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,KADN;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,KAAK,EAAE;AAHF,GADa;AAOpBC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,SAAS,EAAE,KADH;AAERC,IAAAA,OAAO,EAAE,KAFD;AAGRC,IAAAA,KAAK,EAAE;AAHC;AAPU,CAAtB;AAcA,eAAeX,aAAa,CAC1B;AACE,GAACC,UAAU,CAACY,QAAX,EAAD,GAA0BC,KAAD,IAAW;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAELL,MAAAA,SAAS,EAAE,IAFN;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAILC,MAAAA,KAAK,EAAE;AAJF,KAAP;AAMD,GATH;AAWE,GAACT,YAAY,CAACW,QAAb,EAAD,GAA4BC,KAAD,KAAY,EACrC,GAAGA,KADkC;AAErCL,IAAAA,SAAS,EAAE,KAF0B;AAGrCC,IAAAA,OAAO,EAAE;AAH4B,GAAZ,CAX7B;AAiBE,GAACP,UAAU,CAACU,QAAX,EAAD,GAA0BC,KAAD,KAAY,EACnC,GAAGA,KADgC;AAEnCL,IAAAA,SAAS,EAAE,KAFwB;AAGnCC,IAAAA,OAAO,EAAE,IAH0B;AAInCC,IAAAA,KAAK,EAAE;AAJ4B,GAAZ,CAjB3B;AAwBE,GAACP,aAAa,CAACS,QAAd,EAAD,GAA6BC,KAAD,IAAW;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,EACL,GAAGA,KADE;AAELL,MAAAA,SAAS,EAAE,IAFN;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAILC,MAAAA,KAAK,EAAE;AAJF,KAAP;AAMD,GAhCH;AAkCE,GAACN,eAAe,CAACQ,QAAhB,EAAD,GAA+BC,KAAD,KAAY,EACxC,GAAGA,KADqC;AAExCL,IAAAA,SAAS,EAAE,KAF6B;AAGxCC,IAAAA,OAAO,EAAE;AAH+B,GAAZ,CAlChC;AAwCE,GAACJ,aAAa,CAACO,QAAd,EAAD,GAA6BC,KAAD,KAAY,EACtC,GAAGA,KADmC;AAEtCL,IAAAA,SAAS,EAAE,KAF2B;AAGtCC,IAAAA,OAAO,EAAE,IAH6B;AAItCC,IAAAA,KAAK,EAAE;AAJ+B,GAAZ;AAxC9B,CAD0B,EAgD1BJ,aAhD0B,CAA5B","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { loginStart, loginSuccess, loginError, registerStart, registerSuccess, registerError} from './authActions';\n\nconst INITIAL_STATE = {\n  login: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n\n  register: {\n    isLoading: false,\n    isError: false,\n    error: null,\n  },\n};\n\nexport default handleActions(\n  {\n    [loginStart.toString()]: (state) => {\n      console.log('STATE', state);\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n        error: null,\n      };\n    },\n\n    [loginSuccess.toString()]: (state) => ({\n      ...state,\n      isLoading: false,\n      isError: false,\n    }),\n\n    [loginError.toString()]: (state) => ({\n      ...state,\n      isLoading: false,\n      isError: true,\n      error: true,\n    }),\n\n    [registerStart.toString()]: (state) => {\n      console.log('STATE', state);     \n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n        error: null,\n      };\n    },\n\n    [registerSuccess.toString()]: (state) => ({\n      ...state,\n      isLoading: false,\n      isError: false,\n    }),\n\n    [registerError.toString()]: (state) => ({\n      ...state,\n      isLoading: false,\n      isError: true,\n      error: true,\n    }),\n  },\n  INITIAL_STATE,\n);\n"]},"metadata":{},"sourceType":"module"}